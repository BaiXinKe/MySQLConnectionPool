#include "Connector.hpp"

Connector::Connector(
    std::weak_ptr<MySQLConnectionPool> pool,
    MySQLConnectionPool::ConnectionPtr conn)
    : pool_ { pool }
    , conn_ { std::move(conn) }
{
}

void Connector::clearWarnings()
{
    conn_->clearWarnings();
}

sql::Statement* Connector::createStatement()
{
    return conn_->createStatement();
}

void Connector::close()
{
    conn_->close();
}

void Connector::commit()
{
    conn_->commit();
}

bool Connector::getAutoCommit()
{
    return conn_->getAutoCommit();
}

sql::SQLString Connector::getCatalog()
{
    return conn_->getCatalog();
}

sql::Driver* Connector::getDriver()
{
    return conn_->getDriver();
}

sql::SQLString Connector::getSchema()
{
    return conn_->getSchema();
}

sql::SQLString Connector::getClientInfo()
{
    return conn_->getClientInfo();
}

void Connector::getClientOption(const sql::SQLString& optionName, void* optionValue)
{
    conn_->getClientOption(optionName, optionValue);
}

sql::SQLString Connector::getClientOption(const sql::SQLString& optionName)
{
    return conn_->getClientOption(optionName);
}

sql::DatabaseMetaData* Connector::getMetaData()
{
    return conn_->getMetaData();
}

sql::enum_transaction_isolation Connector::getTransactionIsolation()
{
    return conn_->getTransactionIsolation();
}

const sql::SQLWarning* Connector::getWarnings()
{
    return conn_->getWarnings();
}

bool Connector::isClosed()
{
    return conn_->isClosed();
}

bool Connector::isReadOnly()
{
    return conn_->isReadOnly();
}

bool Connector::isValid()
{
    return conn_->isValid();
}

bool Connector::reconnect()
{
    return conn_->reconnect();
}

sql::SQLString Connector::nativeSQL(const sql::SQLString& sql)
{
    return conn_->nativeSQL(sql);
}

sql::PreparedStatement* Connector::prepareStatement(const sql::SQLString& sql)
{
    return conn_->prepareStatement(sql);
}

sql::PreparedStatement* Connector::prepareStatement(const sql::SQLString& sql, int autoGeneratedKeys)
{
    return conn_->prepareStatement(sql, autoGeneratedKeys);
}

sql::PreparedStatement* Connector::prepareStatement(const sql::SQLString& sql, int* columnIndexes)
{
    return conn_->prepareStatement(sql, columnIndexes);
}

sql::PreparedStatement* Connector::prepareStatement(const sql::SQLString& sql, int resultSetType, int resultSetConcurrency)
{
    return conn_->prepareStatement(sql, resultSetType, resultSetConcurrency);
}

sql::PreparedStatement* Connector::prepareStatement(const sql::SQLString& sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
{
    return conn_->prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
}

sql::PreparedStatement* Connector::prepareStatement(const sql::SQLString& sql, sql::SQLString columnNames[])
{
    return conn_->prepareStatement(sql, columnNames);
}

void Connector::releaseSavepoint(sql::Savepoint* savepoint)
{
    return conn_->releaseSavepoint(savepoint);
}

void Connector::rollback()
{
    conn_->rollback();
}

void Connector::rollback(sql::Savepoint* savepoint)
{
    conn_->rollback(savepoint);
}

void Connector::setAutoCommit(bool autoCommit)
{
    conn_->setAutoCommit(autoCommit);
}

void Connector::setCatalog(const sql::SQLString& catalog)
{
    conn_->setCatalog(catalog);
}

void Connector::setSchema(const sql::SQLString& catalog)
{
    conn_->setSchema(catalog);
}

sql::Connection* Connector::setClientOption(const sql::SQLString& optionName, const void* optionValue)
{
    return conn_->setClientOption(optionName, optionValue);
}

sql::Connection* Connector::setClientOption(const sql::SQLString& optionName, const sql::SQLString& optionValue)
{
    return conn_->setClientOption(optionName, optionValue);
}

void Connector::setHoldability(int holdability)
{
    conn_->setHoldability(holdability);
}

void Connector::setReadOnly(bool readOnly)
{
    conn_->setReadOnly(readOnly);
}

sql::Savepoint* Connector::setSavepoint()
{
    return conn_->setSavepoint();
}

sql::Savepoint* Connector::setSavepoint(const sql::SQLString& name)
{
    return conn_->setSavepoint(name);
}

void Connector::setTransactionIsolation(sql::enum_transaction_isolation level)
{
    conn_->setTransactionIsolation(level);
}

Connector::~Connector()
{
    if (conn_ != nullptr) {
        auto ptr = pool_.lock();
        if (ptr != nullptr) {
            ptr->returnTheConnection(std::move(conn_));
            conn_.reset();
        }
    }
}